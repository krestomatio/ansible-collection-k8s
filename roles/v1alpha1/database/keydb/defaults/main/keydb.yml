keydb_state: "{{ state }}"
keydb_appname: "{{ meta_name }}-keydb"
# keydb_mode: one of 'standalone', 'multimaster', 'custom'
keydb_mode: 'standalone'

# keydb sts
keydb_size: 1
keydb_image: quay.io/krestomatio/keydb:6.3.4@sha256:fce6b951eaf71507917837d869a309f0df2c1deddddfcc15e98ced77b9a388f7
keydb_image_pull_secret: "{{ image_pull_secret }}"
keydb_sts: "{{ keydb_appname }}-sts"
keydb_args:
  - --requirepass "$(KEYDB_PASSWORD)"
keydb_container: "keydb"
keydb_container_group: "{{ keydb_container.replace('-', '_') }}"
keydb_startup_probe: true
keydb_startup_command: "['/usr/libexec/check-container-keydb', '-r']"
keydb_startup_initial: 0
keydb_startup_period: 15
keydb_startup_timeout: 3
keydb_startup_success: 1
keydb_startup_failure: 12
keydb_readiness_probe: true
keydb_readiness_command: "['/usr/libexec/check-container-keydb', '-r']"
keydb_readiness_initial: 0
keydb_readiness_period: 15
keydb_readiness_timeout: 3
keydb_readiness_success: 1
keydb_readiness_failure: 3
keydb_liveness_probe: true
keydb_liveness_command: "['/usr/libexec/check-container-keydb', '-l']"
keydb_liveness_initial: 0
keydb_liveness_period: 15
keydb_liveness_timeout: 3
keydb_liveness_success: 1
keydb_liveness_failure: 6
keydb_resource_requests: true
keydb_resource_requests_cpu: 25m
keydb_resource_requests_memory: 64Mi
keydb_resource_limits: false
keydb_resource_limits_cpu: 1
keydb_resource_limits_memory: 1Gi
keydb_term_grace_period: 30
keydb_data: /data
keydb_tolerations: false
keydb_node_selector: false
keydb_affinity: false
keydb_port: 6379
keydb_connects_to: ""

# keydb services
keydb_service: "{{ keydb_appname }}-service"
keydb_service_spec: |
  type: {{ keydb_service_type | default('ClusterIP') }}
  selector:
    app: '{{ keydb_appname }}'
  ports:
    - name: keydb
      port: {{ keydb_port }}
      protocol: TCP
      targetPort: {{ keydb_port }}
  sessionAffinity: {{ keydb_service_session_affinity | default('None') }}
  {% if keydb_service_session_affinity_timeout is defined %}
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: {{ keydb_service_session_affinity_timeout }}
  {% endif %}
keydb_service_headless: "{{ keydb_appname }}-headless"
keydb_service_headless_spec: |
  selector:
    app: '{{ keydb_appname }}'
  clusterIP: None
  ports:
    - name: keydb
      port: {{ keydb_port }}
      protocol: TCP
      targetPort: {{ keydb_port }}
  sessionAffinity: {{ keydb_service_session_affinity | default('None') }}
  {% if keydb_service_session_affinity_timeout is defined %}
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: {{ keydb_service_session_affinity_timeout }}
  {% endif %}

# keydb empty dir
keydb_empty_dir_data: |-
  medium: Memory

# keydb pvc
keydb_pvc_enabled: true
keydb_pvc_data: "{{ keydb_appname }}-data-pvc"
keydb_pvc_data_storage_access_mode: ReadWriteOnce
keydb_pvc_data_storage_class_name: false
keydb_pvc_data_spec: |
  {% if keydb_pvc_data_storage_class_name is defined and keydb_pvc_data_storage_class_name %}
  storageClassName: {{ keydb_pvc_data_storage_class_name }}
  {% endif %}
  accessModes:
    - '{{ keydb_pvc_data_storage_access_mode }}'
  resources:
    requests:
      storage: '{{ keydb_pvc_data_size }}'
keydb_pvc_data_current_size: "{{ lookup('k8s', api_version='v1', kind='StatefulSet', namespace=meta_namespace,
  resource_name=keydb_sts).spec.volumeClaimTemplates[0].spec.resources.requests.storage | default('') }}"
keydb_pvc_data_size:
  "{{
    keydb_pvc_data_size_gib | string + 'Gi'
  if
    keydb_pvc_data_autoexpansion
  else
    keydb_pvc_data_current_size | default('1Gi', true)
  }}"
keydb_pvc_data_size_gib: "{{ cr_status_properties[routine_pvc_autoexpand_info_keyname].autoexpandSizeGib
  | default(keydb_pvc_data_autoexpansion_increment_gib) }}"

## enable autoexpansion
keydb_pvc_data_autoexpansion: false
### Increments in those GiB
keydb_pvc_data_autoexpansion_increment_gib: 1
### No more than those GiB
keydb_pvc_data_autoexpansion_cap_gib: 5
### Current labels
keydb_pvc_data_current_labels: "{{ lookup('k8s', api_version='v1', kind='StatefulSet', namespace=meta_namespace,
  resource_name=keydb_sts).spec.volumeClaimTemplates[0].metadata.labels | default('') }}"


# keydb secret
keydb_secret: "{{ keydb_appname }}-secret"
keydb_password: "{{ lookup('password', '/dev/null') }}"
## keydb database credentials will be read or randomly generated if not found:
keydb_secret_data: |
  keydb_password: {{ lookup('k8s', api_version='v1', kind='Secret', namespace=meta_namespace,
    resource_name=keydb_secret).data.keydb_password |
    default(keydb_password |
    b64encode,true) }}

# keydb config map
keydb_cm: "{{ keydb_appname }}-cm"
keydb_cm_data_config: |
  port {{ keydb_port }}
  dir {{ keydb_data }}
  server-threads {{ keydb_config_server_threads | default('2') }}
  tcp-keepalive 60
  save 900 1
  save 300 10
  {% if keydb_extra_config is defined and keydb_extra_config %}
  # keydb extra config
  {{ keydb_extra_config }}
  {% endif %}
  {% if keydb_mode_config is defined and keydb_mode_config %}
  # keydb mode: {{ keydb_mode }}
  {{ keydb_mode_config }}
  {% endif %}
keydb_cm_data: |
  keydb.conf: |
    {{ keydb_cm_data_config | indent(2) }}

# keydb sysctls
# keydb_sysctls:
#   - name: net.core.somaxconn
#     value: "{{ keydb_sysctls_somaxconn | default('1024') }}"

# keydb vpa
keydb_vpa: "{{ keydb_appname }}-vpa"
keydb_vpa_spec: false

# keydb netpol
keydb_netpol_omit: true
keydb_netpol: "{{ keydb_appname }}-netpol"
keydb_netpol_ingress_ipblock: false
keydb_netpol_egress_ipblock: false
keydb_netpol_connects_to: "{{ keydb_connects_to if keydb_connects_to | type_debug == 'list' else [keydb_connects_to | default('')] }}"
keydb_netpol_spec: |-
  policyTypes:
  - Ingress
  - Egress
  podSelector:
    matchLabels:
      app.kubernetes.io/name: '{{ keydb_appname }}'
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: '{{ keydb_appname }}'
    - podSelector:
        matchLabels:
          {{ meta_app_connects_to }}/{{ keydb_appname }}: 'true'
  {% if keydb_netpol_ingress_ipblock is defined and keydb_netpol_ingress_ipblock %}
    - ipBlock:
        cidr: '{{ keydb_netpol_ingress_ipblock }}'
  {% endif %}
  egress:
  - ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: '{{ keydb_appname }}'
  {% for keydb_netpol_connects_to_app_name in keydb_netpol_connects_to if keydb_netpol_connects_to_app_name %}
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: '{{ keydb_netpol_connects_to_app_name }}'
    - namespaceSelector:
        matchLabels:
          app.kubernetes.io/name: '{{ keydb_netpol_connects_to_app_name }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: '{{ keydb_netpol_connects_to_app_name }}'
  {% endfor %}
  {% if keydb_netpol_egress_ipblock is defined and keydb_netpol_egress_ipblock %}
    - ipBlock:
        cidr: '{{ keydb_netpol_egress_ipblock }}'
  {% endif %}
