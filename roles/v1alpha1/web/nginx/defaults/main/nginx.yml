---
# nginx
nginx_state: "{{ state }}"
nginx_appname: "{{ meta_name }}-nginx"

# nginx deploy
nginx_size: 1
nginx_image: quay.io/krestomatio/nginx:1.26@sha256:dfa1f5bbbe8f34009e762e9eb1946061ad48e96a07a57b76d30efc53eaa73047
nginx_image_pull_secret: "{{ image_pull_secret }}"
nginx_deploy: "{{ nginx_appname }}-deploy"
nginx_port: 8080
nginx_host: "{{ nginx_ingress_host }}"
nginx_args: "['nginx']"
nginx_container: "nginx"
nginx_container_group: "{{ nginx_container.replace('-', '_') }}"
nginx_startup_probe: false
nginx_startup_path: "/login/index.php"
nginx_startup_host: "{{ nginx_host }}"
nginx_startup_port: "{{ nginx_port }}"
nginx_startup_initial: 5
nginx_startup_period: 10
nginx_startup_timeout: 3
nginx_startup_success: 1
nginx_startup_failure: 6
nginx_readiness_probe: false
nginx_readiness_path: "/login/index.php"
nginx_readiness_host: "{{ nginx_host }}"
nginx_readiness_port: "{{ nginx_port }}"
nginx_readiness_initial: 5
nginx_readiness_period: 10
nginx_readiness_timeout: 3
nginx_readiness_success: 1
nginx_readiness_failure: 6
nginx_liveness_probe: false
nginx_liveness_path: "/login/index.php"
nginx_liveness_host: "{{ nginx_host }}"
nginx_liveness_port: "{{ nginx_port }}"
nginx_liveness_initial: 5
nginx_liveness_period: 10
nginx_liveness_timeout: 3
nginx_liveness_success: 1
nginx_liveness_failure: 3
nginx_resource_requests: true
nginx_resource_requests_cpu: 15m
nginx_resource_requests_memory: 32Mi
nginx_resource_limits: false
nginx_resource_limits_cpu: 1
nginx_resource_limits_memory: 1Gi
nginx_term_grace_period: 30
nginx_run_as_user: 1001
nginx_tolerations: false
nginx_node_selector: false
nginx_affinity: false
nginx_connects_to: false
# nginx_envvars:
#   - name: NGINX_FASTCGI_PASS
#     value: php-service:9000
# nginx_volumes:
#   - name: html
#     mount_path: /var/www/html
#     source: |-
#       persistentVolumeClaim:
#         claimName: metadata-pvc

# nginx config map
nginx_cm: "{{ nginx_appname }}-cm"
nginx_cm_data: |
  nginx-extra.conf: |
    {{ nginx_extra_config | default('') | indent(2) }}

# nginx service
nginx_service: "{{ nginx_appname }}-service"
nginx_service_type: ClusterIP
nginx_service_spec: |
  type: {{ nginx_service_type }}
  sessionAffinity: {{ nginx_service_session_affinity | default('None') }}
  {% if nginx_service_session_affinity_timeout is defined %}
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: {{ nginx_service_session_affinity_timeout }}
  {% endif %}
  ports:
  - name: http
    port: {{ nginx_port }}
    protocol: TCP
    targetPort: {{ nginx_port }}
  selector:
    app: '{{ nginx_appname }}'

# nginx ingress
nginx_ingress: "{{ nginx_appname }}-ingress"
nginx_ingress_type: "{{ 'route' if (k8s_distribution | default('k8s')) == 'okd' else 'ingress' }}"
nginx_ingress_tls: "{{ true if nginx_ingress_protocol == 'https' else false }}"
nginx_ingress_protocol: "http"
nginx_ingress_host: "example.krestomat.io"
## 'nginx_ingress_only' handle only ingress and ignore other resources
nginx_ingress_only: false
nginx_ingress_tls_secret_name: "{{ nginx_ingress + '-tls' if nginx_ingress_annotations | default('') is
  regex('cert-manager.io/(cluster-|)issuer:(?!\ null)') else '' }}"
# nginx_ingress_annotations: |
#   krestomat.io/annotation: value1
#   krestomat.io/other-annotation: value2
nginx_ingress_spec: |
  {% if nginx_ingress_tls %}
  tls:
  - hosts:
    - '{{ nginx_host }}'
  {% if nginx_ingress_tls_secret_name != '' %}
    secretName: {{ nginx_ingress_tls_secret_name }}
  {% endif %}
  {% endif %}
  rules:
  - host: '{{ nginx_host }}'
    http:
      paths:
      - path: {{ nginx_ingress_path | default('/') }}
        pathType: {{ nginx_ingress_path_type | default('ImplementationSpecific') }}
        backend:
          service:
            name: '{{ nginx_service }}'
            port:
              number: {{ nginx_port }}

# nginx router
nginx_route: "{{ nginx_appname }}-route"
nginx_route_tls: "{{ nginx_ingress_tls }}"
## 'nginx_route_only' handle only route and ignore other resources
nginx_route_only: false
nginx_route_annotations: |
  haproxy.router.openshift.io/rate-limit-connections: 'true'
  haproxy.router.openshift.io/rate-limit-connections.concurrent-tcp: '100'
  haproxy.router.openshift.io/rate-limit-connections.rate-http: '100'
  haproxy.router.openshift.io/rate-limit-connections.rate-tcp: '100'
nginx_route_spec: |
  host: '{{ nginx_host }}'
  to:
    kind: Service
    name: '{{ nginx_service }}'
    weight: 100
  port:
    targetPort: http
  {% if nginx_route_tls %}
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  {% endif %}
  wildcardPolicy: None

# nginx hpa
nginx_hpa: "{{ nginx_appname }}-hpa"
nginx_hpa_spec: false

# nginx vpa
nginx_vpa: "{{ nginx_appname }}-vpa"
nginx_vpa_spec: false

# nginx netpol
nginx_netpol_omit: true
nginx_netpol: "{{ nginx_appname }}-netpol"
nginx_netpol_ingress_ipblock: false
nginx_netpol_egress_ipblock: false
nginx_netpol_connects_to: "{{ nginx_connects_to if nginx_connects_to | type_debug == 'list' else [nginx_connects_to | default('')] }}"
nginx_netpol_spec: |-
  policyTypes:
  - Ingress
  - Egress
  podSelector:
    matchLabels:
      app.kubernetes.io/name: '{{ nginx_appname }}'
  ingress:
  - ports:
    - protocol: TCP
      port: {{ nginx_port }}
  - from:
    - podSelector:
        matchLabels:
          {{ meta_app_connects_to }}/{{ nginx_appname }}: 'true'
  {% if nginx_netpol_ingress_ipblock is defined and nginx_netpol_ingress_ipblock %}
    - ipBlock:
        cidr: '{{ nginx_netpol_ingress_ipblock }}'
  {% endif %}
  egress:
  - ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  {% for nginx_netpol_connects_to_app_name in nginx_netpol_connects_to if nginx_netpol_connects_to_app_name %}
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: '{{ nginx_netpol_connects_to_app_name }}'
    - namespaceSelector:
        matchLabels:
          app.kubernetes.io/name: '{{ nginx_netpol_connects_to_app_name }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: '{{ nginx_netpol_connects_to_app_name }}'
  {% endfor %}
  {% if nginx_netpol_egress_ipblock is defined and nginx_netpol_egress_ipblock %}
    - ipBlock:
        cidr: '{{ nginx_netpol_egress_ipblock }}'
  {% endif %}
