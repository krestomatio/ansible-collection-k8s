{% macro metadata() %}{% include common_path + '/metadata.j2' ignore missing %}{% endmacro %}
replicas: {{ 1 if postgres_size | int > 0 else 0 }}
strategy:
  type: Recreate
selector:
  matchLabels:
    app: '{{ postgres_appname }}'
template:
  {{ metadata() | indent(width=2) }}
  spec:
    terminationGracePeriodSeconds: {{ postgres_term_grace_period }}
{% if k8s_distribution == 'k8s' %}
    initContainers:
    - name: 'data-dir-permissions'
      image: '{{ postgres_image }}'
      securityContext:
        runAsUser: 0
      command:
        - '/bin/bash'
        - '-c'
        - |
          chown ${CTR_USER_ID}:${CTR_USER_ID} '{{ postgres_data }}'
          chmod 0700 '{{ postgres_data }}'
      volumeMounts:
      - mountPath: '{{ postgres_data }}'
        name: postgres-data
{% endif %}
    containers:
    - name: '{{ postgres_container }}'
      image: '{{ postgres_image }}'
      env:
        - name: POSTGRESQL_DATABASE
          value: '{{ database_name }}'
        - name: POSTGRESQL_USER
          value: '{{ database_user }}'
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: '{{ postgres_secret }}'
              key: database_password
{% if postgres_log_stderr %}
        - name: POSTGRESQL_LOG_STDERR
          value: "true"
{% endif %}
      ports:
      - containerPort: 5432
        name: postgresql
      imagePullPolicy: IfNotPresent
{% if postgres_readiness_probe %}
      readinessProbe:
        exec:
          command: {{ postgres_readiness_command }}
        initialDelaySeconds: {{ postgres_readiness_initial }}
        periodSeconds: {{ postgres_readiness_period }}
        timeoutSeconds: {{ postgres_readiness_timeout }}
        successThreshold: {{ postgres_readiness_success }}
        failureThreshold: {{ postgres_readiness_failure }}
{% endif %}
{% if postgres_liveness_probe %}
      livenessProbe:
        exec:
          command: {{ postgres_liveness_command }}
        initialDelaySeconds: {{ postgres_liveness_initial }}
        periodSeconds: {{ postgres_liveness_period }}
        timeoutSeconds: {{ postgres_liveness_timeout }}
        successThreshold: {{ postgres_liveness_success }}
        failureThreshold: {{ postgres_liveness_failure }}
{% endif %}
{% if postgres_resource_requests or postgres_resource_limits %}
      resources:
{% if postgres_resource_requests %}
        requests:
          cpu: '{{ postgres_resource_requests_cpu }}'
          memory: '{{ postgres_resource_requests_memory }}'
{% endif %}
{% if postgres_resource_limits %}
        limits:
          cpu: '{{ postgres_resource_limits_cpu }}'
          memory: '{{ postgres_resource_limits_memory }}'
{% endif %}
{% endif %}
      volumeMounts:
      - mountPath: '{{ postgres_data }}'
        name: postgres-data
    volumes:
    - name: postgres-data
      persistentVolumeClaim:
        claimName: '{{ postgres_pvc }}'
{% if postgres_tolerations %}
    tolerations:
    {{ postgres_tolerations | to_nice_yaml(indent=2) | indent(4) }}
{% endif %}
